Bottom: 2731f3e7739b90f97e9e2c3911c159b05f256b7e
Top:    32611dc98d9d7607404e6f4822342e3700eb389c
Author: Ben Greear <greearb@candelatech.com>
Date:   2014-12-31 13:51:29 -0800

ath10k: Allow over-riding regulatory domain.

Uses ath10k_core module parameter 'override_eeprom_regdomain'

Signed-off-by: Ben Greear <greearb@candelatech.com>


---

diff --git a/drivers/net/wireless/ath/ath10k/wmi.c b/drivers/net/wireless/ath/ath10k/wmi.c
index 1fddb0b..dc7c7d3 100644
--- a/drivers/net/wireless/ath/ath10k/wmi.c
+++ b/drivers/net/wireless/ath/ath10k/wmi.c
@@ -17,6 +17,7 @@
 
 #include <linux/skbuff.h>
 #include <linux/ctype.h>
+#include <linux/module.h>
 
 #include "core.h"
 #include "htc.h"
@@ -29,6 +30,12 @@
 #include "p2p.h"
 #include "hw.h"
 
+static int modparam_override_eeprom_regdomain = -1;
+module_param_named(override_eeprom_regdomain,
+		   modparam_override_eeprom_regdomain, int, 0444);
+MODULE_PARM_DESC(override_eeprom_regdomain, "Override regdomain hardcoded in EEPROM with this value (DANGEROUS).");
+
+
 /* MAIN WMI cmd track */
 static struct wmi_cmd_map wmi_cmd_map = {
 	.init_cmdid = WMI_INIT_CMDID,
@@ -4641,6 +4648,21 @@ static void ath10k_wmi_event_service_ready_work(struct work_struct *work)
 			 ar->fw_version_build);
 	}
 
+	if ((modparam_override_eeprom_regdomain != -1) &&
+	    (modparam_override_eeprom_regdomain != ar->ath_common.regulatory.current_rd)) {
+		static int do_once = 1;
+		if (do_once) {
+			ath10k_err(ar, "DANGER! You're overriding EEPROM-defined regulatory domain,"
+				   "\nfrom: 0x%x to 0x%x\n",
+				   ar->ath_common.regulatory.current_rd, modparam_override_eeprom_regdomain);
+			ath10k_err(ar, "Your card was not certified to operate in the domain you chose.\n");
+			ath10k_err(ar, "This might result in a violation of your local regulatory rules.\n");
+			ath10k_err(ar, "Do not ever do this unless you really know what you are doing!\n");
+			do_once = 0;
+		}
+		ar->ath_common.regulatory.current_rd = modparam_override_eeprom_regdomain | COUNTRY_ERD_FLAG;
+	}
+
 	num_mem_reqs = __le32_to_cpu(arg.num_mem_reqs);
 	if (num_mem_reqs > WMI_MAX_MEM_REQS) {
 		ath10k_warn(ar, "requested memory chunks number (%d) exceeds the limit\n",
