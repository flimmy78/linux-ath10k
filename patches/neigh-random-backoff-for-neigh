Bottom: aa6d2933e753a42d5dfc13e123b5b019e0d6e703
Top:    e75e5d4c9339f33641d5b8357bb241f944568525
Author: Ben Greear <greearb@candelatech.com>
Date:   2014-08-11 13:41:20 -0700

neigh: random backoff for neigh (arp) retransmits.

Allow random backoffs for neighbour (ARP) retransmits.
This helps reduce the thundering herd when using lots of
MAC-vlans, for instance.

Signed-off-by: Ben Greear <greearb@candelatech.com>


---

diff --git a/include/net/neighbour.h b/include/net/neighbour.h
index 8b68384..a227cd8 100644
--- a/include/net/neighbour.h
+++ b/include/net/neighbour.h
@@ -51,6 +51,7 @@ enum {
 	NEIGH_VAR_PROXY_QLEN,
 	NEIGH_VAR_ANYCAST_DELAY,
 	NEIGH_VAR_PROXY_DELAY,
+	NEIGH_VAR_RETRANS_RAND_BACKOFF,
 	NEIGH_VAR_LOCKTIME,
 #define NEIGH_VAR_DATA_MAX (NEIGH_VAR_LOCKTIME + 1)
 	/* Following are used as a second way to access one of the above */
diff --git a/include/uapi/linux/sysctl.h b/include/uapi/linux/sysctl.h
index 0956373..9f5523c 100644
--- a/include/uapi/linux/sysctl.h
+++ b/include/uapi/linux/sysctl.h
@@ -598,6 +598,7 @@ enum {
 	NET_NEIGH_GC_THRESH3=16,
 	NET_NEIGH_RETRANS_TIME_MS=17,
 	NET_NEIGH_REACHABLE_TIME_MS=18,
+	NET_NEIGH_RETRANS_RAND_BACKOFF=19,
 };
 
 /* /proc/sys/net/dccp */
diff --git a/kernel/sysctl_binary.c b/kernel/sysctl_binary.c
index 6eb99c1..cca106b 100644
--- a/kernel/sysctl_binary.c
+++ b/kernel/sysctl_binary.c
@@ -283,6 +283,7 @@ static const struct bin_table bin_net_neigh_vars_table[] = {
 	{ CTL_INT,	NET_NEIGH_GC_THRESH3,		"gc_thresh3" },
 	{ CTL_INT,	NET_NEIGH_RETRANS_TIME_MS,	"retrans_time_ms" },
 	{ CTL_INT,	NET_NEIGH_REACHABLE_TIME_MS,	"base_reachable_time_ms" },
+	{ CTL_INT,	NET_NEIGH_RETRANS_RAND_BACKOFF,	"retrans_rand_backoff_ms" },
 	{}
 };
 
diff --git a/net/core/neighbour.c b/net/core/neighbour.c
index 29dd8cc..06f5293 100644
--- a/net/core/neighbour.c
+++ b/net/core/neighbour.c
@@ -826,6 +826,14 @@ static __inline__ int neigh_max_probes(struct neighbour *n)
 	        NEIGH_VAR(p, MCAST_PROBES));
 }
 
+static unsigned long neigh_rand_retry(struct neighbour* neigh) {
+	int b = NEIGH_VAR(neigh->parms, RETRANS_RAND_BACKOFF);
+	if (b) {
+		return prandom_u32() % b;
+	}
+	return 0;
+}
+
 static void neigh_invalidate(struct neighbour *neigh)
 	__releases(neigh->lock)
 	__acquires(neigh->lock)
@@ -918,11 +926,13 @@ static void neigh_timer_handler(unsigned long arg)
 			neigh->updated = jiffies;
 			atomic_set(&neigh->probes, 0);
 			notify = 1;
-			next = now + NEIGH_VAR(neigh->parms, RETRANS_TIME);
+			next = now + NEIGH_VAR(neigh->parms, RETRANS_TIME)
+				+ neigh_rand_retry(neigh);
 		}
 	} else {
 		/* NUD_PROBE|NUD_INCOMPLETE */
-		next = now + NEIGH_VAR(neigh->parms, RETRANS_TIME);
+		next = now + NEIGH_VAR(neigh->parms, RETRANS_TIME)
+			+ neigh_rand_retry(neigh);
 	}
 
 	if ((neigh->nud_state & (NUD_INCOMPLETE | NUD_PROBE)) &&
@@ -3069,6 +3079,7 @@ static struct neigh_sysctl_table {
 		NEIGH_SYSCTL_ZERO_INTMAX_ENTRY(PROXY_QLEN, "proxy_qlen"),
 		NEIGH_SYSCTL_USERHZ_JIFFIES_ENTRY(ANYCAST_DELAY, "anycast_delay"),
 		NEIGH_SYSCTL_USERHZ_JIFFIES_ENTRY(PROXY_DELAY, "proxy_delay"),
+		NEIGH_SYSCTL_MS_JIFFIES_ENTRY(RETRANS_RAND_BACKOFF, "retrans_rand_backoff_ms"),
 		NEIGH_SYSCTL_USERHZ_JIFFIES_ENTRY(LOCKTIME, "locktime"),
 		NEIGH_SYSCTL_UNRES_QLEN_REUSED_ENTRY(QUEUE_LEN, QUEUE_LEN_BYTES, "unres_qlen"),
 		NEIGH_SYSCTL_MS_JIFFIES_REUSED_ENTRY(RETRANS_TIME_MS, RETRANS_TIME, "retrans_time_ms"),
@@ -3147,6 +3158,8 @@ int neigh_sysctl_register(struct net_device *dev, struct neigh_parms *p,
 		t->neigh_vars[NEIGH_VAR_BASE_REACHABLE_TIME].proc_handler = handler;
 		/* RetransTime (in milliseconds)*/
 		t->neigh_vars[NEIGH_VAR_RETRANS_TIME_MS].proc_handler = handler;
+		/* RetransRandBackoffTime (in milliseconds)*/
+		t->neigh_vars[NEIGH_VAR_RETRANS_RAND_BACKOFF].proc_handler = handler;
 		/* ReachableTime (in milliseconds) */
 		t->neigh_vars[NEIGH_VAR_BASE_REACHABLE_TIME_MS].proc_handler = handler;
 	} else {
diff --git a/net/decnet/dn_neigh.c b/net/decnet/dn_neigh.c
index 482730c..d05ed33 100644
--- a/net/decnet/dn_neigh.c
+++ b/net/decnet/dn_neigh.c
@@ -98,6 +98,7 @@ struct neigh_table dn_neigh_table = {
 			[NEIGH_VAR_PROXY_QLEN] = 0,
 			[NEIGH_VAR_ANYCAST_DELAY] = 0,
 			[NEIGH_VAR_PROXY_DELAY] = 0,
+			[NEIGH_VAR_RETRANS_RAND_BACKOFF] = 0,
 			[NEIGH_VAR_LOCKTIME] = 1 * HZ,
 		},
 	},
diff --git a/net/ipv4/arp.c b/net/ipv4/arp.c
index 89a8cac..f530861 100644
--- a/net/ipv4/arp.c
+++ b/net/ipv4/arp.c
@@ -175,6 +175,7 @@ struct neigh_table arp_tbl = {
 			[NEIGH_VAR_PROXY_QLEN] = 64,
 			[NEIGH_VAR_ANYCAST_DELAY] = 1 * HZ,
 			[NEIGH_VAR_PROXY_DELAY]	= (8 * HZ) / 10,
+			[NEIGH_VAR_RETRANS_RAND_BACKOFF] = 0,
 			[NEIGH_VAR_LOCKTIME] = 1 * HZ,
 		},
 	},
