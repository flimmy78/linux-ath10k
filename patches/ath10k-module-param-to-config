Bottom: b8a0769bc8d4bdc6c71e33aeee26cb00c5af43c5
Top:    c0f0f3a06221b9522f1d7051e7413e4bf582e878
Author: Ben Greear <greearb@candelatech.com>
Date:   2014-06-26 11:34:07 -0700

ath10k: Module param to config number of vdevs.

Depending on version of firmware, different numbers
of vdevs can be supported.  Allow user to over-ride
defaults for CT firmware.  Other firmware will not
be affected by this change.

Signed-off-by: Ben Greear <greearb@candelatech.com>


---

diff --git a/drivers/net/wireless/ath/ath10k/core.c b/drivers/net/wireless/ath/ath10k/core.c
index 9281fc3..95db145 100644
--- a/drivers/net/wireless/ath/ath10k/core.c
+++ b/drivers/net/wireless/ath/ath10k/core.c
@@ -1593,7 +1593,7 @@ static int ath10k_core_init_firmware_features(struct ath10k *ar)
 		if (test_bit(ATH10K_FW_FEATURE_WMI_10X_CT, fw_file->fw_features)) {
 			ar->max_num_peers = TARGET_10X_NUM_PEERS_CT;
 			ar->max_num_stations = TARGET_10X_NUM_STATIONS;
-			ar->max_num_vdevs = TARGET_10X_NUM_VDEVS_CT;
+			ar->max_num_vdevs = ath10k_modparam_target_num_vdevs_ct;
 			ar->htt.max_num_pending_tx = TARGET_10X_NUM_MSDU_DESC_CT;
 		} else {
 			ar->max_num_peers = TARGET_10X_NUM_PEERS;
diff --git a/drivers/net/wireless/ath/ath10k/hw.h b/drivers/net/wireless/ath/ath10k/hw.h
index 3ea7d9e..6c0e716 100644
--- a/drivers/net/wireless/ath/ath10k/hw.h
+++ b/drivers/net/wireless/ath/ath10k/hw.h
@@ -372,8 +372,9 @@ enum ath10k_hw_4addr_pad {
 						 (TARGET_10X_NUM_VDEVS))
 
 /* Over-rides for Candela Technologies firmware */
-#define TARGET_10X_NUM_VDEVS_CT			36
-#define TARGET_10X_NUM_PEERS_CT			(2 * TARGET_10X_NUM_VDEVS_CT)
+#define DEF_TARGET_10X_NUM_VDEVS_CT		36 /* newer CT firmware support more,
+						    * override w/module parm */
+#define TARGET_10X_NUM_PEERS_CT			(2 * ath10k_modparam_target_num_vdevs_ct)
 #define TARGET_10X_AST_SKID_LIMIT_CT		(TARGET_10X_NUM_PEERS_CT * TARGET_10X_NUM_PEER_AST)
 #define TARGET_10X_NUM_PEER_KEYS_CT             (WMI_MAX_KEY_INDEX + 1) /* 4 */
 /* These eat a fair chunk of memory on the firmware, so decrease it a bit. */
diff --git a/drivers/net/wireless/ath/ath10k/mac.c b/drivers/net/wireless/ath/ath10k/mac.c
index b0f9e58..6f94c7a 100644
--- a/drivers/net/wireless/ath/ath10k/mac.c
+++ b/drivers/net/wireless/ath/ath10k/mac.c
@@ -184,6 +184,9 @@ int ath10k_mac_ext_resource_config(struct ath10k *ar, u32 val)
 int ath10k_modparam_nohwcrypt;
 module_param_named(nohwcrypt, ath10k_modparam_nohwcrypt, int, 0444);
 MODULE_PARM_DESC(nohwcrypt, "Disable hardware rx decrypt feature");
+int ath10k_modparam_target_num_vdevs_ct = DEF_TARGET_10X_NUM_VDEVS_CT;
+module_param_named(num_vdevs_ct, ath10k_modparam_target_num_vdevs_ct, int, 0444);
+MODULE_PARM_DESC(num_vdevs_ct, "Maximum vdevs to request from firmware");
 
 /**********/
 /* Crypto */
@@ -7515,9 +7518,9 @@ static const struct ieee80211_iface_limit ath10k_10x_if_limits[] = {
 	},
 };
 
-static const struct ieee80211_iface_limit ath10k_10x_ct_if_limits[] = {
+static struct ieee80211_iface_limit ath10k_10x_ct_if_limits[] = {
 	{
-	.max	= TARGET_10X_NUM_VDEVS_CT,
+	.max	= DEF_TARGET_10X_NUM_VDEVS_CT,
 	.types	= BIT(NL80211_IFTYPE_STATION)
 		| BIT(NL80211_IFTYPE_P2P_CLIENT)
 	},
@@ -7531,7 +7534,7 @@ static const struct ieee80211_iface_limit ath10k_10x_ct_if_limits[] = {
 	},
 };
 
-static const struct ieee80211_iface_combination ath10k_if_comb[] = {
+static struct ieee80211_iface_combination ath10k_if_comb[] = {
 	{
 		.limits = ath10k_if_limits,
 		.n_limits = ARRAY_SIZE(ath10k_if_limits),
@@ -7541,7 +7544,7 @@ static const struct ieee80211_iface_combination ath10k_if_comb[] = {
 	},
 };
 
-static const struct ieee80211_iface_combination ath10k_10x_if_comb[] = {
+static struct ieee80211_iface_combination ath10k_10x_if_comb[] = {
 	{
 		.limits = ath10k_10x_if_limits,
 		.n_limits = ARRAY_SIZE(ath10k_10x_if_limits),
@@ -7611,11 +7614,11 @@ static const struct ieee80211_iface_limit ath10k_tlv_if_limit_ibss[] = {
 	},
 };
 
-static const struct ieee80211_iface_combination ath10k_10x_ct_if_comb[] = {
+static struct ieee80211_iface_combination ath10k_10x_ct_if_comb[] = {
 	{
 		.limits = ath10k_10x_ct_if_limits,
 		.n_limits = ARRAY_SIZE(ath10k_10x_ct_if_limits),
-		.max_interfaces = TARGET_10X_NUM_VDEVS_CT,
+		.max_interfaces = DEF_TARGET_10X_NUM_VDEVS_CT,
 		.num_different_channels = 1,
 		.beacon_int_infra_match = true,
 #ifdef CONFIG_ATH10K_DFS_CERTIFIED
@@ -7907,6 +7910,13 @@ int ath10k_mac_register(struct ath10k *ar)
 		if (test_bit(ATH10K_FW_FEATURE_WMI_10X_CT,
 			     ar->normal_mode_fw.fw_file.fw_features)) {
 			ar->hw->wiphy->iface_combinations = ath10k_10x_ct_if_comb;
+			ath10k_10x_ct_if_comb[0].limits[0].max =
+				ar->max_num_vdevs;
+			ath10k_10x_ct_if_comb[0].max_interfaces =
+				ar->max_num_vdevs;
+
+			ar->hw->wiphy->iface_combinations =
+				ath10k_10x_ct_if_comb;
 			ar->hw->wiphy->n_iface_combinations =
 				ARRAY_SIZE(ath10k_10x_ct_if_comb);
 		} else {
diff --git a/drivers/net/wireless/ath/ath10k/mac.h b/drivers/net/wireless/ath/ath10k/mac.h
index 8b3038d..8037b8d 100644
--- a/drivers/net/wireless/ath/ath10k/mac.h
+++ b/drivers/net/wireless/ath/ath10k/mac.h
@@ -27,6 +27,7 @@ enum wmi_tlv_tx_pause_id;
 enum wmi_tlv_tx_pause_action;
 
 extern int ath10k_modparam_nohwcrypt;
+extern int ath10k_modparam_target_num_vdevs_ct;
 
 struct ath10k_generic_iter {
 	struct ath10k *ar;
diff --git a/drivers/net/wireless/ath/ath10k/wmi.c b/drivers/net/wireless/ath/ath10k/wmi.c
index dc7c7d3..08a57c1 100644
--- a/drivers/net/wireless/ath/ath10k/wmi.c
+++ b/drivers/net/wireless/ath/ath10k/wmi.c
@@ -5496,8 +5496,8 @@ static struct sk_buff *ath10k_wmi_op_gen_init(struct ath10k *ar)
 	struct wmi_resource_config config = {};
 	u32 len, val;
 
-	config.num_vdevs = __cpu_to_le32(TARGET_NUM_VDEVS);
-	config.num_peers = __cpu_to_le32(TARGET_NUM_PEERS);
+	config.num_vdevs = __cpu_to_le32(ar->max_num_vdevs);
+	config.num_peers = __cpu_to_le32(ar->max_num_peers);
 	config.num_offload_peers = __cpu_to_le32(TARGET_NUM_OFFLOAD_PEERS);
 
 	config.num_offload_reorder_bufs =
@@ -5571,11 +5571,11 @@ static struct sk_buff *ath10k_wmi_10_1_op_gen_init(struct ath10k *ar)
 	u32 skid_limit;
 
 	config.rx_decap_mode = __cpu_to_le32(ar->wmi.rx_decap_mode);
+	config.num_vdevs = __cpu_to_le32(ar->max_num_vdevs);
+	config.num_peers = __cpu_to_le32(ar->max_num_peers);
 
 	if (test_bit(ATH10K_FW_FEATURE_WMI_10X_CT,
 		     ar->running_fw->fw_file.fw_features)) {
-		config.num_vdevs = __cpu_to_le32(TARGET_10X_NUM_VDEVS_CT);
-		config.num_peers = __cpu_to_le32(TARGET_10X_NUM_PEERS_CT);
 		skid_limit = TARGET_10X_AST_SKID_LIMIT_CT;
 		if (test_bit(ATH10K_FW_FEATURE_CT_RXSWCRYPT,
 			     ar->running_fw->fw_file.fw_features) &&
@@ -5595,10 +5595,7 @@ static struct sk_buff *ath10k_wmi_10_1_op_gen_init(struct ath10k *ar)
 		config.roam_offload_max_vdev = 0; /* disable roaming */
 		config.roam_offload_max_ap_profiles = 0; /* disable roaming */
 		config.num_peer_keys = __cpu_to_le32(TARGET_10X_NUM_PEER_KEYS_CT);
-		config.num_msdu_desc = __cpu_to_le32(TARGET_10X_NUM_MSDU_DESC_CT);
 	} else {
-		config.num_vdevs = __cpu_to_le32(TARGET_10X_NUM_VDEVS);
-		config.num_peers = __cpu_to_le32(TARGET_10X_NUM_PEERS);
 		skid_limit = TARGET_10X_AST_SKID_LIMIT;
 		config.roam_offload_max_vdev =
 			__cpu_to_le32(TARGET_10X_ROAM_OFFLOAD_MAX_VDEV);
@@ -5606,8 +5603,8 @@ static struct sk_buff *ath10k_wmi_10_1_op_gen_init(struct ath10k *ar)
 		config.roam_offload_max_ap_profiles =
 			__cpu_to_le32(TARGET_10X_ROAM_OFFLOAD_MAX_AP_PROFILES);
 		config.num_peer_keys = __cpu_to_le32(TARGET_10X_NUM_PEER_KEYS);
-		config.num_msdu_desc = __cpu_to_le32(TARGET_10X_NUM_MSDU_DESC);
 	}
+	config.num_msdu_desc = __cpu_to_le32(ar->htt.max_num_pending_tx);
 	config.ast_skid_limit = __cpu_to_le32(skid_limit);
 
 	/* Firmware will crash if this is not even multiple of 8 */
